security:
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Utilisateur:
            algorithm: auto

    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\UtilisateurAuthenticator
            custom_authenticator: App\Security\UtilisateurAuthenticator
            logout:
                path: logout
                # redirect apr√®s logout vers home
                target: home
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 semaine en secondes               
                #always_remember_me: true
            guard:
                authenticators:
                    - App\Security\GoogleAuthenticator

            

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin_s_op, roles: [ROLE_SUPER_ADMIN, ROLE_FINANCE_ADMIN] }
        # - { path: ^/profile, roles: ROLE_USER }
    # redirection Utilisateur en cas de access denied
    access_denied_url: /login/no_acces

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
